plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'jacoco'
	id "org.sonarqube" version "4.4.1.3373"
}

group = 'org.ieee-rvce.api'
version = '0.1.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

bootJar{
	exclude('application-local.properties')
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.auth0:java-jwt:4.4.0'
	implementation 'org.modelmapper:modelmapper:3.2.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'com.h2database:h2'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
	reports {
		xml.required = true
    }
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

sonar {
  properties {
    property "sonar.projectKey", "IEEE-RVCE_reforseti"
    property "sonar.organization", "ieee-rvce"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}
